<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode面试题16.19——水域大小</title>
    <url>/2020/10/21/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9816-19%E2%80%94%E2%80%94%E6%B0%B4%E5%9F%9F%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<br>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/2020/10/21/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9816-19%E2%80%94%E2%80%94%E6%B0%B4%E5%9F%9F%E5%A4%A7%E5%B0%8F/LeetCode%E9%9D%A2%E8%AF%95%E9%A2%9816.19%E2%80%94%E2%80%94%E6%B0%B4%E5%9F%9F%E5%A4%A7%E5%B0%8F.png" alt></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>采用深度优先搜索，维护一个vector，最后进行排序输出</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pondSizes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; land)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(land.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = land.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> col = land[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(land[i][j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dfs(land, i, j, count);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count)</span><br><span class="line">                &#123;</span><br><span class="line">                    res.push_back(count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; land, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> &amp;count)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = land.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> col = land[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= row || j &gt;= col || land[i][j] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        land[i][j] = <span class="number">-1</span>;</span><br><span class="line">        count++;</span><br><span class="line">        dfs(land, i + <span class="number">1</span>, j, count);</span><br><span class="line">        dfs(land, i - <span class="number">1</span>, j, count);</span><br><span class="line">        dfs(land, i, j - <span class="number">1</span>, count);</span><br><span class="line">        dfs(land, i, j + <span class="number">1</span>, count);</span><br><span class="line">        dfs(land, i - <span class="number">1</span>, j - <span class="number">1</span>, count);</span><br><span class="line">        dfs(land, i - <span class="number">1</span>, j + <span class="number">1</span>, count);</span><br><span class="line">        dfs(land, i + <span class="number">1</span>, j - <span class="number">1</span>, count);</span><br><span class="line">        dfs(land, i + <span class="number">1</span>, j + <span class="number">1</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>经测试通过！</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>关于桶排序</title>
    <url>/2020/03/30/%E5%85%B3%E4%BA%8E%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<br>

<p>一直都在拖延，一直很懒散，接下来不能这样子了！！！</p>
<p><strong>今天学习了桶排序，个人感觉还是比较好理解，写个博客记录一下</strong></p>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>用数组实现，首先要申请一个数组，比如有10个数字，希望从小到大排列，循环输入十个数字，比如有0-9十个数字，分别为6 9 5 5 4 2 3 7 6 1，当数字出现了几次，数组当中对应该数字的下标+1，具体来说就是1出现了一次，a[1]++，2出现了1次，a[2]++，以此类推，最后按照下标从小到大的顺序依次打印就可以，出现了几次打印几次，具体的过程见下图，比较直观：</p>
<p><img src="/2020/03/30/%E5%85%B3%E4%BA%8E%E6%A1%B6%E6%8E%92%E5%BA%8F/1.png" alt></p>
<h2 id="代码实现（c-）"><a href="#代码实现（c-）" class="headerlink" title="代码实现（c++）"></a>代码实现（c++）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_NO_SECURE_WARINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],t,n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        a[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);<span class="comment">//输入n个数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);<span class="comment">//将数字读入t中</span></span><br><span class="line">        a[t]++;<span class="comment">//记录出现的次数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[i];j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);<span class="comment">//输出排序之后的结果</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p><img src="/2020/03/30/%E5%85%B3%E4%BA%8E%E6%A1%B6%E6%8E%92%E5%BA%8F/2.png" alt></p>
<br>

<h2 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h2><p>桶排序比较简单，时间复杂度是$O(M+N)$，但是在用数组实现的过程中，需要保证输入数据的最大数不超过数组的最大下标，否则会越界。还有没有其他的方式来实现桶排序后边在研究一下，晚安！</p>
<br>

<p><font color="red" size="72"><strong>加油骚年！还有机会！</strong></font></p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>RCF论文阅读笔记</title>
    <url>/2020/03/22/RCF/</url>
    <content><![CDATA[<ul>
<li>论文地址：</li>
<li>论文源码：</li>
</ul>
<br>

<br>

<p><strong>RCF简介</strong></p>
<p>RCF是南开大学程明明课题组的一项工作，他们在基于HED网络的基础之上，使用来自所有卷积层的特征，并且改进了现有的加权交叉熵损失函数，最终取得了不错的结果。<a id="more"></a></p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>edge detection</tag>
      </tags>
  </entry>
  <entry>
    <title>HED论文阅读笔记</title>
    <url>/2020/03/22/HED/</url>
    <content><![CDATA[<ul>
<li>论文地址：<a href="https://arxiv.org/pdf/1504.06375" target="_blank" rel="noopener">https://arxiv.org/pdf/1504.06375</a></li>
<li>论文源码：<ul>
<li>【caffe版本】<a href="https://github.com/s9xie/hed" target="_blank" rel="noopener">https://github.com/s9xie/hed</a></li>
<li>【pytorch版本】<a href="https://github.com/xwjabc/hed" target="_blank" rel="noopener">https://github.com/xwjabc/hed</a></li>
</ul>
</li>
</ul>
<br>

<br>

<p><strong>HED简介</strong></p>
<p>本文是屠卓文课题组于2015年的工作，通过多尺度融合的思想，提出了一个端到端的网络，大大提升了边缘检测的效果。与以往边缘检测算法不同的是，HED通过深度学习执行图像到图像的预测，该模型利用全卷积神经网络（VGG-16）和深度监督机制，自动学习丰富的层次表示，对于解决边缘和对象边界检测中的挑战模糊性是重要的。HED是第一个利用图片整体特征的边缘检测算法，具有开创性意义。<a id="more"></a></p>
<h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>整体的结构见下图：<img src="/2020/03/22/HED/image-20200322151501036.png" alt></p>
<ol>
<li>采用VGG-16作为主干网络，对图片特征进行提取，并且删掉了VGG最后一个stage，包括五个池化层和所有的全连接层。</li>
<li>在卷积层后插入输出层side-output，并且在side-output上采用深度监督机制，使得结果向具有期望的特征边缘检测方向进行。</li>
<li>将side-output结果进行上采样，主要是双线性插值，将图片恢复到input size大小。</li>
<li>最后通过加权融合层得到最终的输出。</li>
</ol>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>鉴于边缘像素的分布不均的特点（一幅图上边缘像素与非边缘像素的比值大概为1:9），本文提出了一种新的loss，用来解决样本分布不平衡所带来的问题。<img src="/2020/03/22/HED/image-20200322152311712.png" alt="image-20200322152311712"></p>
<p>其中：<img src="/2020/03/22/HED/image-20200322152341580.png" alt="image-20200322152341580"></p>
<p>代表gt中非边缘像素占所有像素的比例，<img src="/2020/03/22/HED/image-20200322153752552.png" alt="image-20200322153752552">表示gt中第j个像素点为边缘像素点，通过这种带权重的交叉熵损失函数，来增加边缘像素的权重，降低非边缘像素的权重，从而达到平衡正负样本的目的。</p>
<p>除此以外，在融合层的损失函数为：<img src="/2020/03/22/HED/image-20200322160948727.png" alt="image-20200322160948727"></p>
<p>主要思路是判断最终额预测结果与gt之间的距离度量，论文中采用的是交叉熵损失函数。</p>
<p>所以最终的损失函数为：<img src="/2020/03/22/HED/image-20200322161157832.png" alt="image-20200322161157832"></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="/2020/03/22/HED/image-20200322161407566.png" alt="image-20200322161407566"></p>
<p><img src="/2020/03/22/HED/image-20200322161519767.png" alt="image-20200322161519767"></p>
<h2 id="可以改进的措施"><a href="#可以改进的措施" class="headerlink" title="可以改进的措施"></a>可以改进的措施</h2><ul>
<li>HED只利用了每个stage最后一个卷积层的特征，并没有充分利用所有的特征。（这在之后的RCF可以明显看出）</li>
<li>并没有显式的利用上下文的信息</li>
<li>得到的边缘图比较粗糙，不够精细</li>
</ul>
<br>

<p><font color="red" size="72">第一篇博客，回顾了一下之前的工作，发现好多地方都忘记了，欢迎批评指正！</font></p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>edge detection</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
